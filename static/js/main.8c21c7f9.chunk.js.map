{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","messages","setMessages","useState","inputText","setInputText","userInfo","setUserInfo","name","preferences","lastInteraction","getBotResponse","text","toLowerCase","includes","split","trim","prev","_objectSpread","concat","React","createElement","className","map","msg","index","key","sender","time","onSubmit","e","preventDefault","userMessage","Date","toLocaleTimeString","setTimeout","botMessage","type","value","onChange","target","placeholder","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mMA+HeA,MA5Hf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAWC,GAAgBF,mBAAS,KACpCG,EAAUC,GAAeJ,mBAAS,CACvCK,KAAM,GACNC,YAAa,GACbC,gBAAiB,OAGbC,EAAkBC,IAItB,IAHAA,EAAOA,EAAKC,eAGHC,SAAS,cAAe,CAC/B,MAAMN,EAAOI,EAAKG,MAAM,cAAc,GAAGC,OAEzC,OADAT,EAAYU,GAAIC,wBAAA,GAASD,GAAI,IAAET,KAAMA,KACrC,MAAAW,OAAaX,EAAI,gDAGnB,OAAII,EAAKE,SAAS,mBACTR,EAASE,KAAI,gBAAAW,OACAb,EAASE,KAAI,KAC7B,yDAIFI,EAAKE,SAAS,UAAYF,EAAKE,SAAS,MACnCR,EAASE,KAAI,eAAAW,OACDb,EAASE,KAAI,+BAC5B,+CAGFI,EAAKE,SAAS,eACT,sDAGLF,EAAKE,SAAS,mBACT,gGAIT,2BAAAK,OAAkCP,EAAI,mCA4BxC,OACEQ,IAAAC,cAAA,OAAKC,UAAU,sCACbF,IAAAC,cAAA,OAAKC,UAAU,qDAEbF,IAAAC,cAAA,OAAKC,UAAU,kDACbF,IAAAC,cAAA,MAAIC,UAAU,qBAAoB,sBACjChB,EAASE,MACRY,IAAAC,cAAA,KAAGC,UAAU,sBAAqB,kBAAgBhB,EAASE,OAK/DY,IAAAC,cAAA,OAAKC,UAAU,oDACbF,IAAAC,cAAA,OAAKC,UAAU,aACZrB,EAASsB,IAAI,CAACC,EAAKC,IAClBL,IAAAC,cAAA,OAAKK,IAAKD,EACRH,UAAS,QAAAH,OAAyB,SAAfK,EAAIG,OAAoB,cAAgB,kBAC3DP,IAAAC,cAAA,OAAKC,UAAS,8BAAAH,OACG,SAAfK,EAAIG,OACA,8BACA,mCAEJP,IAAAC,cAAA,KAAGC,UAAU,WAAWE,EAAIZ,MAC5BQ,IAAAC,cAAA,QAAMC,UAAU,iCACbE,EAAII,WASjBR,IAAAC,cAAA,QAAMQ,SA1DQC,IAElB,GADAA,EAAEC,kBACG3B,EAAUY,OAAQ,OAEvB,MAAMgB,EAAc,CAClBpB,KAAMR,EACNuB,OAAQ,OACRC,MAAM,IAAIK,MAAOC,sBAGnBhC,EAAYe,GAAQ,IAAIA,EAAMe,IAG9BG,WAAW,KACT,MAAMC,EAAa,CACjBxB,KAAMD,EAAeP,GACrBuB,OAAQ,MACRC,MAAM,IAAIK,MAAOC,sBAEnBhC,EAAYe,GAAQ,IAAIA,EAAMmB,KAC7B,KAEH/B,EAAa,KAoCmBiB,UAAU,oCACpCF,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SACEgB,KAAK,OACLC,MAAOlC,EACPmC,SAAWT,GAAMzB,EAAayB,EAAEU,OAAOF,OACvChB,UAAU,gFACVmB,YAAY,yBAEdrB,IAAAC,cAAA,UACEgB,KAAK,SACLf,UAAU,gFACX,aCzGEoB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAf,EAAA,GAAAgB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,IAAAC,cAACD,IAAMuC,WAAU,KACfvC,IAAAC,cAACrB,EAAG,QAOR0C","file":"static/js/main.8c21c7f9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [userInfo, setUserInfo] = useState({\n    name: '',\n    preferences: {},\n    lastInteraction: null\n  });\n\n  const getBotResponse = (text) => {\n    text = text.toLowerCase();\n    \n    // Name related responses\n    if (text.includes('my name is')) {\n      const name = text.split('my name is')[1].trim();\n      setUserInfo(prev => ({...prev, name: name}));\n      return `Hi ${name}! Nice to meet you. I'll remember your name!`;\n    }\n    \n    if (text.includes('what is my name')) {\n      return userInfo.name \n        ? `Your name is ${userInfo.name}!` \n        : \"I don't know your name yet. Please introduce yourself!\";\n    }\n\n    // General conversation responses\n    if (text.includes('hello') || text.includes('hi')) {\n      return userInfo.name \n        ? `Hello again ${userInfo.name}! How can I help you today?` \n        : 'Hello! Would you like to introduce yourself?';\n    }\n\n    if (text.includes('how are you')) {\n      return 'Im doing well, thank you for asking! How about you?';\n    }\n\n    if (text.includes('what can you do')) {\n      return 'I can remember your name, chat with you, and answer basic questions. Try asking me something!';\n    }\n\n    // Default response\n    return `I understand you said: \"${text}\". How can I help you further?`;\n  };\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    if (!inputText.trim()) return;\n\n    const userMessage = {\n      text: inputText,\n      sender: 'user',\n      time: new Date().toLocaleTimeString()\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    \n    // Bot response with slight delay\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(inputText),\n        sender: 'bot',\n        time: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    }, 500);\n\n    setInputText('');\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-100\">\n      <div className=\"max-w-3xl mx-auto w-full p-4 flex-1 flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-blue-600 text-white p-4 rounded-t-lg shadow\">\n          <h1 className=\"text-xl font-bold\">Chat Bot Assesment</h1>\n          {userInfo.name && (\n            <p className=\"text-sm opacity-90\">Chatting with: {userInfo.name}</p>\n          )}\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto bg-white p-4 shadow-inner\">\n          <div className=\"space-y-4\">\n            {messages.map((msg, index) => (\n              <div key={index} \n                className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n                <div className={`max-w-[80%] rounded-lg p-3 ${\n                  msg.sender === 'user' \n                    ? 'bg-blue-600 text-white ml-4' \n                    : 'bg-gray-200 text-gray-800 mr-4'\n                }`}>\n                  <p className=\"text-sm\">{msg.text}</p>\n                  <span className=\"text-xs opacity-75 mt-1 block\">\n                    {msg.time}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Input form */}\n        <form onSubmit={handleSend} className=\"bg-white p-4 rounded-b-lg shadow\">\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              className=\"flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Type your message...\"\n            />\n            <button\n              type=\"submit\"\n              className=\"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition-colors\"\n            >\n              Send\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}